#!/bin/bash

# Rolf Niepraschk, Rolf.Niepraschk@gmx.de

VERSION='2.4.3 2025-03-25'
CAPTION='[IPTC:2:120]' # Caption/Abstract
DATETIME='[EXIF:DateTimeOriginal]'

script="$(basename ${BASH_SOURCE:-$0})"

if [ -x "$(command -v magick)" ]; then
  CONVERT_CMD="magick"
else
  CONVERT_CMD="convert"
fi

VIDEO_FILE='slideshow.mp4'
RESOLUTION='1920x1080'
TEXTWIDTH=480
H_BORDER=10
V_BORDER=0
BACKGROUND='black'
FOREGROUND='white'
TITLE_FOREGROUND='#ffd700'    # Gold:       1,.844,0 --> 255,215,0 --> #ffd700
SUBTITLE_FOREGROUND='#00bfff' # DeepSkyBlue: 0,.75,1 --> 0,191,255 --> #00bfff
TITLE_POINTSIZE=28
SUBTITLE_POINTSIZE=24
POINTSIZE=20
TITLE_SOURCE='title.txt'
TITLE_FILE='title.png'
DELAY=10 # seconds
# The usual time jump for the arrow keys, e.g. for 'vlc', is 10 seconds.
FPS=25 # frames per seconds

show_cap=false
show_date=false
max_dirs=1

while getopts ":cdr:Vh" opt; do
  case ${opt} in
    c)
      show_cap=true
      ;;
    d)
      show_date=true
      ;;
    r)
      max_dirs=${OPTARG}
      ;;
    V)
      echo "${script}, version ${VERSION}"
      exit 1
      ;;
    h)
      echo
      echo "Syntax: create_slideshow [|-c|-d|-r|-V|-h]"
      echo "options:"
      echo "c     shows caption"
      echo "d     shows date+time"
      echo "r #   Maximum number of directory levels (default: #=1)"
      echo "V     output version information and exit"
      echo "h     this help"
      echo
      exit 1
      ;;
    ?)
      echo "Invalid option: -${OPTARG}."
      exit 1
      ;;
  esac
done

rm -f "${TITLE_FILE}" temp-????-?.png 

n=0
# Works with spaces in names.
find . -maxdepth ${max_dirs} -name "*" | sort | while read f ; do 
  if file -L "$f" | grep -qE 'image|bitmap'; then # Only image files.
    n=$(( ${n}+1 ))
    echo "${n}.: ${f}"
    intertitle_file=$(printf "temp-%04d-0.png" ${n})
    desc_file=$(printf "temp-%04d-1.png" ${n})
    img_file=$(printf  "temp-%04d-2.png" ${n})
    cap_text=''
    if [ "${show_cap}" = true ] ; then
      cap_text=$(identify -format "%${CAPTION}" "${f}" 2> /dev/null)
    fi
    date_text=''
    if [ "${show_date}" = true ] ; then
      date_text=$(identify -format "%${DATETIME}" "${f}" 2> /dev/null \
        | rev | sed 's/:/-/g3' | rev) # Replacing the first two ":" with "-".
    fi    
    text=$(echo -e "${cap_text}\n\n${date_text}" | \
      sed -z 's/^\s*//' | sed -z 's/\s*$//') # Removing leading/trailing white spaces.
    if [ -n "${text}" ]; then
      ${CONVERT_CMD} -fill "${FOREGROUND}" -background "${BACKGROUND}" -pointsize "${POINTSIZE}" \
        -size "${TEXTWIDTH}"x -gravity center caption:"${text}" \
        -bordercolor "${BACKGROUND}" -border "${H_BORDER}"x"${V_BORDER}" \
        -resize "${RESOLUTION}" -extent "${RESOLUTION}" "PNG24:${desc_file}"
    fi
    intertitle_source="$(basename "${f}" ".${f##*.}")-intertitle.txt"
    intertitle_text=''
    if [ -f "${intertitle_source}" ]; then
      intertitle_text=$(cat "${intertitle_source}")
    fi
    if [ -n "${intertitle_text}" ]; then
      ${CONVERT_CMD} -fill "${SUBTITLE_FOREGROUND}" -background "${BACKGROUND}" -pointsize "${SUBTITLE_POINTSIZE}" \
        -size "${TEXTWIDTH}"x -gravity center caption:"${intertitle_text}" \
        -bordercolor "${BACKGROUND}" -border "${H_BORDER}"x"${V_BORDER}" \
        -resize "${RESOLUTION}" -extent "${RESOLUTION}" "PNG24:${intertitle_file}"
    fi
    ${CONVERT_CMD} "${f}" -background black -gravity center \
      -resize "${RESOLUTION}" -extent "${RESOLUTION}" "PNG24:${img_file}"    
  fi
done

if [ -f "${TITLE_SOURCE}" ]; then
  title_text=$(cat "${TITLE_SOURCE}")
fi
if [ -n "${title_text}" ]; then
  ${CONVERT_CMD} -fill "${TITLE_FOREGROUND}" -background "${BACKGROUND}" -pointsize "${TITLE_POINTSIZE}" \
    -size "${TEXTWIDTH}"x -gravity center caption:"${title_text}" \
    -bordercolor "${BACKGROUND}" -border "${H_BORDER}"x"${V_BORDER}" \
    -resize "${RESOLUTION}" -extent "${RESOLUTION}" "PNG24:${TITLE_FILE}"
fi

if [ -f 'temp-0001-2.png' ]; then # At least the first image file must exist.
  echo -e "\nCreate: ${VIDEO_FILE}"
  cat "${TITLE_FILE}" temp-????-?.png 2>/dev/null | \
    ffmpeg -y -loglevel error \
      -f lavfi -i anullsrc -framerate "1/${DELAY}" -f image2pipe -i - \
        -r ${FPS} -c:v libx264 -profile:v baseline -pix_fmt yuv420p -c:a aac \
          -max_muxing_queue_size 4000 -shortest "${VIDEO_FILE}"
  # The video should have an audio dummy channel and an old h264 profile to
  # display on older TVs.
fi

rm -f "${TITLE_FILE}" temp-????-?.png

echo "done."

exit
